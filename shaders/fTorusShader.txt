#version 300 es

precision highp float;

uniform float time;
uniform vec2 resolution;
uniform mat4 mProjInv;
uniform mat4 mViewInv;
uniform sampler2D mazeText;
uniform mat4 mPlayerInv;
uniform mat4 mEndInv;

out vec4 outColor;

const float pi = acos(-1.0),
    rOuter = 0.1,
    rInner = 0.6,
    lineWidth = 0.1,
    gridWidth = 60.0,
    gridHeight = 10.0,
    sphereR = 0.02;

const vec2 gridDivisor = vec2(gridWidth, gridHeight * 2.0);

float sdTorus(vec3 p, float rOuter, float rInner)
{
    vec2 q = vec2(length(p.xz) - rInner, p.y);
    return length(q) - rOuter;
}

float sdSphere(vec3 p, float s)
{
    return length(p) - s;
}

float getAtan(float y, float x)
{
    float res = (atan(y, x) + pi) * 0.5 / pi;
    return fract(res + 0.5);
}

vec3 torusColor(vec3 p)
{
    float innerAngle = getAtan(p.x, p.z);

    vec3 newAxis = normalize(vec3(p.x, 0.0, p.z));
    vec3 orbitPos = newAxis * rInner;

    vec3 dv = p - orbitPos;
    
    float outerAngle = getAtan(p.y, dot(dv, newAxis));
    
    innerAngle *= gridWidth;
    outerAngle *= gridHeight;

    innerAngle = mod(innerAngle + lineWidth / 2.0, gridWidth);
    outerAngle = mod(outerAngle + lineWidth / 2.0, gridHeight);

    float c1 = fract(innerAngle),
        c2 = fract(outerAngle);

    float col1, col2, col3;

    vec2 baseUv = floor(vec2(innerAngle, outerAngle));

    vec2 uv = baseUv;
        
    uv.y = uv.y * 2.0 + 1.0;
    uv += 0.5;
    uv /= gridDivisor;
    col1 = texture(mazeText, uv).r;

    uv = baseUv;
    
    uv.y = uv.y * 2.0;
    uv += 0.5;
    uv /= gridDivisor;
    col2 = texture(mazeText, uv).r;

    uv = baseUv;
    
    uv.x -= 1.0;
    uv.y = uv.y * 2.0;
    uv += 0.5;
    uv /= gridDivisor;
    col3 = texture(mazeText, uv).r;

    col1 *= step(c1, lineWidth);
    col2 *= step(c2, lineWidth);
    col3 *= step(c1, lineWidth) * step(c2, lineWidth);

    col2 = max(col2, col3);

    return vec3(1.0 - max(col1, col2));
}

float map(vec3 p)
{
    vec4 p4 = vec4(p, 1.0);
    float res = sdTorus(p, rOuter, rInner);

    res = min(res, sdSphere((mPlayerInv * p4).xyz, sphereR));
    res = min(res, sdSphere((mEndInv * p4).xyz, sphereR));

    return res;
}

const float eps = 0.01;

void main()
{
    vec2 uv = (gl_FragCoord.xy * 2.0 - resolution) / resolution;

    vec4 rayClip = mProjInv * vec4(uv.x, uv.y, -1.0, 1.0);
    rayClip.z = -1.0;
    rayClip.w = 0.0;
    rayClip = mViewInv * rayClip;

    vec3 ro = (mViewInv * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    vec3 rd = normalize(rayClip.xyz);
    vec3 pos;
    float t = 0.0;
    float h;
    for(int i = 0; i < 64; ++i)
    {
        pos = ro + t * rd;
        h = map(pos);
        if (h <= eps * 0.01 || h >= 5.0) 
            break;
        t += h;
    }

    vec4 pos4 = vec4(pos, 1.0);
    float hitTorus = step(sdTorus(pos, rOuter, rInner), eps * 0.5),
        hitPlayer = step(sdSphere((mPlayerInv * pos4).xyz, sphereR), eps * 0.5),
        hitEnd = step(sdSphere((mEndInv * pos4).xyz, sphereR), eps * 0.5);

    vec3 col = hitTorus * torusColor(pos) +
        hitPlayer * vec3(0.0, 1.0, 0.0) +
        hitEnd * vec3(0.0, 1.0, 1.0);

    outColor = vec4(col, 1.0);
}